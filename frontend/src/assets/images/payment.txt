import { CardElement, useStripe, useElements } from '@stripe/react-stripe-js';
const stripe = useStripe();
const elements = useElements();
const [paymentStatus, setPaymentStatus] = useState("");

{
paymentMethod == "stripe" && <div className='border p-3'>
                                <CardElement />
                            </div>
}

<button className='btn btn-primary mt-3' type="submit" disabled={!stripe || loading}>
                                            {loading ? "Processing..." : `Pay Now`}
                                        </button>
                                        
{paymentStatus && <p className='alert alert-info mt-3'>{paymentStatus}</p>}


const response = await fetch(`${apiUrl}/create-payment-intent`, {
      method: "POST",
      headers: {
          "Content-Type": "application/json",
      },
      body: JSON.stringify({ amount: grandTotal()*100 }), 
  });

  const result = await response.json();
        
  if (!result.clientSecret) {
      console.error("Failed to retrieve client secret");
      setPaymentStatus("Unable to process payment. Please try again.");
      setLoading(false);
      return;
  }

  // Ensure Stripe and Elements are loaded
  if (!stripe || !elements) {
      console.error("Stripe has not loaded yet.");
      setPaymentStatus("Stripe is not ready. Please try again later.");
      setLoading(false);
      return;
  }

  const clientSecret = result.clientSecret;
  const cardElement = elements.getElement(CardElement);

  // Confirm the card payment
  const paymentResult = await stripe.confirmCardPayment(clientSecret, {
      payment_method: {
          card: cardElement,
          billing_details: {
              name: data.name,
              email: data.email,
              address: {
                  line1: data.address,
                  city: data.city,
                  state: data.state,
                  postal_code: data.zip,
              },
          },
      },
  });

  console.log("Payment result:", paymentResult);
        
  // Handle the result of the payment confirmation
  if (paymentResult.error) {
      setPaymentStatus(`Payment failed: ${paymentResult.error.message}`);
  } else if (paymentResult.paymentIntent.status === "succeeded") {
      saveOrder(data,'paid');
      setPaymentStatus("Payment successful!");
  }
